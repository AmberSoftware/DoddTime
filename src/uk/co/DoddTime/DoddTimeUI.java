/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package uk.co.DoddTime;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import javax.swing.JFileChooser;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Mike
 */
public class DoddTimeUI extends javax.swing.JFrame {
    private static final int MAX_JOBS = 50;
    private TimeItem[] timeItems = new TimeItem[MAX_JOBS];
    //       private int nextTimeItemNo = 0;
    private boolean firstAdd = true;
    private TimeFile tFile;
    private boolean TimeFileExists = false;
    private String JOB_NO_ERROR = "Job Number Invalid";
    private String DESC_ERROR = "Job Description can't be blank";
    private String TIME_ERROR = "Time invalid";

    

    /**
     * Creates new form NewJFrame
     */
    public DoddTimeUI() {
        initComponents();
        try{
        MaskFormatter mf = new MaskFormatter("##:##");
        DefaultFormatterFactory factory = new DefaultFormatterFactory(mf);
        inTime.setFormatterFactory(factory);
        } catch (ParseException ex){
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        FileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        inJobNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inDescription = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jobNumberErrorText = new javax.swing.JLabel();
        descriptionErrorText = new javax.swing.JLabel();
        timeErrorText = new javax.swing.JLabel();
        inTime = new javax.swing.JFormattedTextField();
        pauseResumeButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jobTable = new javax.swing.JTable();
        activePauseText = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        exportRounding = new javax.swing.JFormattedTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Export = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        refresh = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        FileChooser.setDialogTitle("Open file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("New job details"));

        inJobNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel1.setText("Job Number:");

        jLabel2.setText("Description:");

        inDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inDescriptionActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Time:");

        jobNumberErrorText.setForeground(new java.awt.Color(255, 0, 0));
        jobNumberErrorText.setEnabled(false);

        descriptionErrorText.setForeground(new java.awt.Color(255, 0, 0));
        descriptionErrorText.setEnabled(false);

        timeErrorText.setForeground(new java.awt.Color(255, 0, 0));
        timeErrorText.setToolTipText("");
        timeErrorText.setEnabled(false);

        inTime.setText("00:00");
        inTime.setValue("00:00");
        inTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inTimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(addButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(inJobNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jobNumberErrorText))
                            .addComponent(inDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(inTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(timeErrorText)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 113, Short.MAX_VALUE)
                        .addComponent(descriptionErrorText)))
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inJobNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jobNumberErrorText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionErrorText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(timeErrorText)
                    .addComponent(inTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(addButton))
        );

        pauseResumeButton.setText("Pause");
        pauseResumeButton.setEnabled(false);
        pauseResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseResumeButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jobTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Job Number", "Description", "Hours", "Mins", "Secs", "Active"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jobTable.getTableHeader().setReorderingAllowed(false);
        jobTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jobTableMouseClicked(evt);
            }
        });
        jobTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jobTablePropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(jobTable);

        activePauseText.setForeground(new java.awt.Color(0, 255, 0));
        activePauseText.setText("Active");
        activePauseText.setEnabled(false);
        activePauseText.setFocusTraversalKeysEnabled(false);
        activePauseText.setFocusable(false);
        activePauseText.setInheritsPopupMenu(false);
        activePauseText.setRequestFocusEnabled(false);
        activePauseText.setVerifyInputWhenFocusTarget(false);

        jLabel4.setText("Export Rounding (Mins)");

        exportRounding.setValue(15);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        Export.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        Export.setText("Export");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });
        jMenu1.add(Export);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("View");

        refresh.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        jMenu2.add(refresh);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pauseResumeButton)
                        .addGap(37, 37, 37)
                        .addComponent(activePauseText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportRounding, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pauseResumeButton)
                    .addComponent(activePauseText)
                    .addComponent(jLabel4)
                    .addComponent(exportRounding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inDescriptionActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (validateAdd()) {
            if (!firstAdd) {
                timeItems[TimeItem.getActiveItemNo()].stop();
                timeItems[TimeItem.getNextItemNo()] = new TimeItem(inJobNumber.getText(), inDescription.getText(), inTime.getText());
                setUIActive();
            }
            else {
                firstAdd = false;
                pauseResumeButton.setEnabled(true);
                timeItems[0] = new TimeItem(inJobNumber.getText(), inDescription.getText(), inTime.getText());
                activePauseText.setEnabled(true);
            }
            // update the table
            refreshTable();
            inTime.setText("00:00");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    // when pausing stop the current time item and set button text to "Resume", when
    // resuming restart current time item and toggle the button text
    private void pauseResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseResumeButtonActionPerformed
        togglePause();
        refreshTable();
    }//GEN-LAST:event_pauseResumeButtonActionPerformed

    private void togglePause() {
        // If currently active then stop active item, update UI
        if (timeItems[TimeItem.getActiveItemNo()].isActive()) {
            timeItems[TimeItem.getActiveItemNo()].stop();
            setUIPaused();
        }
        // if not currently active resume last active item, update UI
        else {
            timeItems[TimeItem.getActiveItemNo()].resume();
            setUIActive();
        }
    }
    
    // Set screen to active
    private void setUIActive() {
        pauseResumeButton.setText("Pause");
        activePauseText.setText("Active");
        activePauseText.setForeground(new java.awt.Color(0, 153, 0));
    }
    
    // Pause
    private void setUIPaused() {
        pauseResumeButton.setText("Resume");
        activePauseText.setText("Paused");
        activePauseText.setForeground(new java.awt.Color(255, 153, 0));
    }
    
    // exit
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        quitUI();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void jobTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jobTableMouseClicked
    }//GEN-LAST:event_jobTableMouseClicked

    // process user updates to table
    private void jobTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jobTablePropertyChange
        int row = jobTable.getEditingRow();
        if (row >= TimeItem.getNextItemNo()) {
            clearTableEntry(row);
            return;
        }
        // if activating an item from paused, then need to toggle pause/resume
        // or deactivating the current active item, also need to toggle
        if ((row>=0 && !timeItems[TimeItem.getActiveItemNo()].isActive() && (boolean)jobTable.getValueAt(row, 5)) ||
                (row>=0 && row == TimeItem.getActiveItemNo() && timeItems[TimeItem.getActiveItemNo()].isActive()
                 && !(boolean)jobTable.getValueAt(row, 5))){
            //need to set actve item to current row in case resuming with
            // an item which wasn't the last active item
            TimeItem.setActiveItemNo(row);
            togglePause();
            refreshTable();
        }
        
        // if changed to active, then deactivate previously active time item
        else if (row>=0 && row != TimeItem.getActiveItemNo() && (boolean)jobTable.getValueAt(row, 5)) {
            timeItems[TimeItem.getActiveItemNo()].stop();
            timeItems[row].resume();
            refreshTable();
        }
        
        // else if not a change of the active flag then update item from table
        else if (row>=0){        
            timeItems[row].updateItem(
                    jobTable.getValueAt(row, 0).toString(), 
                    jobTable.getValueAt(row, 1).toString(), 
                    (int)jobTable.getValueAt(row, 2), 
                    (int)jobTable.getValueAt(row, 3), 
                    (int)jobTable.getValueAt(row, 4), 
                    (boolean)jobTable.getValueAt(row, 5));
        }
    }//GEN-LAST:event_jobTablePropertyChange

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
        // open file chooser dialog and return file path if not cancelled
        int returnVal = FileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            // instantiate file
            try{
                tFile = new TimeFile(FileChooser.getSelectedFile().getAbsolutePath());
                TimeFileExists=true;
                // write time items to file
                for (int i = 0; i < MAX_JOBS; i++){
                    try{
                        timeItems[i] = tFile.read();
                    }
                    // leave loop at end of file
                    catch (IOException ex) {
                        System.out.println(ex);
                        System.out.println(i);
                        break;
                    }
                    finally {
                        firstAdd=false;
                    }
                }
            // Always set to paused after opening and activate pause/resume
            // button
            pauseResumeButton.setEnabled(true);
            activePauseText.setEnabled(true);
            setUIPaused();
            refreshTable();
            }
            // any errors from file chooser
            catch (IOException e) {
                System.out.println("File error-  nuff said");
            }    
        }
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        quitUI();
    }//GEN-LAST:event_ExitActionPerformed

    // close file and leave
    private void quitUI(){
        if (TimeFileExists) {
            try{
                tFile.close();
            } catch (IOException ex) {
                System.out.println(ex);
            }
        }
        System.exit(0);
    }
    
    // save to existing file or create new file and save to it
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        
        // update existing file
        if (TimeFileExists){
            try {
                tFile.updateAddAll(timeItems);
            }
            catch (IOException ex) {
                System.out.println(ex);
            }
        }
        // user file chooser to create new file then write to it
        else {
            int returnVal = FileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try{
                    tFile = new TimeFile(FileChooser.getSelectedFile().getAbsolutePath());
                    TimeFileExists = true;
                    tFile.updateAddAll(timeItems);
                }
                catch (IOException ex) {
                    System.out.println(ex);
                }    
            }   
        }    
    }//GEN-LAST:event_SaveActionPerformed

    // show formatted text for copy to time system
    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            // Test rounding and default to nearest minute if invalid
            int roundMins = 1;
            if (validNumeric(exportRounding.getText())){
                roundMins=Integer.parseInt(exportRounding.getText());
            }
            // Set rounding
            RoundedTimeItem.setRoundMins(roundMins);
            RoundedTimeItem[] roundedTimeItems = new RoundedTimeItem[MAX_JOBS];
            for (TimeItem ti:timeItems) {
                if (ti == null) break;
                roundedTimeItems[ti.getItemNo()] = new RoundedTimeItem(ti);
            }

            CopyWindow dialog = new CopyWindow(new javax.swing.JFrame(), true, roundedTimeItems);
            dialog.setVisible(true);
            }
        });    
    }//GEN-LAST:event_ExportActionPerformed

    private void inTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inTimeActionPerformed

    // refresh current active item and then UI table
    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        if (timeItems[TimeItem.getActiveItemNo()].isActive()) {
            timeItems[TimeItem.getActiveItemNo()].refresh();
        }    
        refreshTable();
    }//GEN-LAST:event_refreshActionPerformed

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addButtonMouseClicked
    
    // add a new entry to the job table
    private void addTableEntry(){
        int secs=timeItems[TimeItem.getActiveItemNo()].getTotalSeconds();
        jobTable.setValueAt(timeItems[TimeItem.getActiveItemNo()].getJobNumber(), TimeItem.getActiveItemNo(), 0);
        jobTable.setValueAt(timeItems[TimeItem.getActiveItemNo()].getDescription(), TimeItem.getActiveItemNo(), 1);
        jobTable.setValueAt((timeItems[TimeItem.getActiveItemNo()].getHours()), TimeItem.getActiveItemNo(), 2);        
        jobTable.setValueAt((timeItems[TimeItem.getActiveItemNo()].getMinutes()), TimeItem.getActiveItemNo(), 3);
        jobTable.setValueAt((timeItems[TimeItem.getActiveItemNo()].getSeconds()), TimeItem.getActiveItemNo(), 4);        
        jobTable.setValueAt(timeItems[TimeItem.getActiveItemNo()].isActive(), TimeItem.getActiveItemNo(), 5);
    }
    
    // clear entry from the job table
    private void clearTableEntry(int row){
        jobTable.setValueAt("", row, 0);
        jobTable.setValueAt("", row, 1);
        jobTable.setValueAt("", row, 2);
        jobTable.setValueAt("", row, 3);  
        jobTable.setValueAt("", row, 4); 
        jobTable.setValueAt(false, row, 5);
    }    
    
    // refresh UI table
    private void refreshTable(){
        //just trying out a fix, makes no difference doing this first:
        //for (int i = 0; i<TimeItem.getNextItemNo(); i++) {
        //    jobTable.setValueAt(false, i, 5);
        //}
        
        for (int i = 0; i<TimeItem.getNextItemNo(); i++) {
            int secs = timeItems[i].getTotalSeconds();
            jobTable.setValueAt(timeItems[i].getJobNumber(), i, 0);
            jobTable.setValueAt(timeItems[i].getDescription(), i, 1);
            jobTable.setValueAt((timeItems[i].getHours()), i, 2);            
            jobTable.setValueAt((timeItems[i].getMinutes()), i, 3);
            jobTable.setValueAt((timeItems[i].getSeconds()), i, 4);            
            jobTable.setValueAt(timeItems[i].isActive(), i, 5);
        }
    }
    
    // clear all error messages
    private void clearErrors() {
        jobNumberErrorText.setEnabled(false);
        jobNumberErrorText.setText(" ");    
        descriptionErrorText.setEnabled(false);
        descriptionErrorText.setText(" ");        
        timeErrorText.setEnabled(false);
        timeErrorText.setText(" ");
    }
    
    // validate input fields prior to adding
    private boolean validateAdd() {
        boolean valid = true;
        clearErrors();
        // job no must be numeric
        if (!validNumeric(inJobNumber.getText())) {
            jobNumberErrorText.setEnabled(true);
            jobNumberErrorText.setText(JOB_NO_ERROR);
            valid = false;
        }
        
        // decription must be entered
        if (inDescription.getText().length() == 0) {
            descriptionErrorText.setEnabled(true);
            descriptionErrorText.setText(DESC_ERROR);
            valid = false;
        }        
        
        // time must be numeric or null
        if (inTime.getText().length() > 0 && !validNumeric(inTime.getText().substring(0,2))
                                            || !validNumeric(inTime.getText().substring(3,5))) {
            timeErrorText.setEnabled(true);
            timeErrorText.setText(TIME_ERROR);
            valid = false;
        }        
        
        return valid;
    }
    
    // check a string contains valid integer value
    private boolean validNumeric(String number) {
        try {
            int testNumeric = Integer.parseInt(number);
        } catch (NumberFormatException ex){
            return false;
        }
            return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoddTimeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoddTimeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoddTimeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoddTimeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoddTimeUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Export;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Save;
    private javax.swing.JLabel activePauseText;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel descriptionErrorText;
    private javax.swing.JButton exitButton;
    private javax.swing.JFormattedTextField exportRounding;
    private javax.swing.JTextField inDescription;
    private javax.swing.JTextField inJobNumber;
    private javax.swing.JFormattedTextField inTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jobNumberErrorText;
    private javax.swing.JTable jobTable;
    private javax.swing.JButton pauseResumeButton;
    private javax.swing.JMenuItem refresh;
    private javax.swing.JLabel timeErrorText;
    // End of variables declaration//GEN-END:variables
}
